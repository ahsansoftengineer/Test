{"version":3,"file":"default-src_app_class_base_form_treeview_ts.js","mappings":"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","sources":["./src/app/class/allow-permission/DynamicDataBase.ts","./src/app/class/allow-permission/DynamicDataSource.ts","./src/app/class/base.form.treeview.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Analysis, AnalysisFlat } from './DynamicFlatNode';\r\nimport { URLz } from 'src/app/enums/url.enum';\r\nimport { HTTPService } from 'src/app/service/http.service';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DynamicDatabase {\r\n  public _http: HTTPService;\r\n\r\n  constructor(injector: Injector) {\r\n    this._http = injector.get(HTTPService);\r\n  }\r\n\r\n  user_id: string = null;\r\n  treeCases = 0;\r\n  isExpandable(node: AnalysisFlat): boolean {\r\n    return node.expandable;\r\n  }\r\n\r\n  dataChange = new BehaviorSubject<Analysis[]>([]);\r\n  get data(): Analysis[] {\r\n    return this.dataChange.value;\r\n  }\r\n\r\n  dbForm;\r\n  // ?user_id=145&system_id=5&organisation_id=12&parameters=1&level=2&id=01\r\n\r\n  getAnalysis(query): Observable<any> {\r\n    if (this.treeCases == 2) {\r\n      return this._http.gets({\r\n        endpoint: URLz.ANALYSIS_PURPOSE_PERMISSION_TREE,\r\n        query,\r\n      });\r\n    } else if (this.user_id === null && this.treeCases == 0) {\r\n      return this._http.gets({\r\n        endpoint: URLz.ANALYSIS_PERMISSION_TREE,\r\n        query,\r\n      });\r\n    } else {\r\n      return this._http.gets({\r\n        endpoint: URLz.ANALYSIS_PERMISSION_USER_TREE,\r\n        query,\r\n      });\r\n    }\r\n  }\r\n\r\n  saveAnalysis(body): Observable<any> {\r\n    const endpoint =\r\n      this.treeCases == 2\r\n        ? URLz.ANALYSIS_PURPOSE_PERMISSION_TREE\r\n        : URLz.ANALYSIS_PERMISSION_TREE;\r\n    return this._http.create({\r\n      endpoint,\r\n      body,\r\n    });\r\n  }\r\n}\r\n","import { CollectionViewer, SelectionChange } from '@angular/cdk/collections';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DynamicDatabase } from './DynamicDataBase';\r\nimport { AnalysisFlat } from './DynamicFlatNode';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DynamicDataSource {\r\n  constructor(\r\n    public treeControl: FlatTreeControl<AnalysisFlat>,\r\n    public database: DynamicDatabase\r\n  ) {}\r\n  get data(): AnalysisFlat[] {\r\n    return this.dataChange.value;\r\n  }\r\n  set data(value: AnalysisFlat[]) {\r\n    this.treeControl.dataNodes = value;\r\n    this.dataChange.next(value);\r\n  }\r\n  dataChange: BehaviorSubject<AnalysisFlat[]> = new BehaviorSubject<AnalysisFlat[]>([]);\r\n  _activeNode = '';\r\n  // Expande and Close\r\n  connect(collectionViewer: CollectionViewer): Observable<AnalysisFlat[]> {\r\n    this.treeControl.expansionModel.changed!.subscribe((change) => {\r\n      if (\r\n        (change as SelectionChange<AnalysisFlat>).added ||\r\n        (change as SelectionChange<AnalysisFlat>).removed\r\n      ) {\r\n        this.handleTreeControl(change as SelectionChange<AnalysisFlat>);\r\n      }\r\n    });\r\n\r\n    return merge(collectionViewer.viewChange, this.dataChange).pipe(\r\n      map(() => this.data)\r\n    );\r\n  }\r\n  // Problemetic\r\n  handleTreeControl(change: SelectionChange<AnalysisFlat>) {\r\n    if (change.added) {\r\n      change.added.forEach((node) => this.toggleNode(node, true));\r\n    }\r\n    if (change.removed) {\r\n      change.removed.reverse().forEach((node) => this.toggleNode(node, false));\r\n    }\r\n  }\r\n  // Adding Removing Child from Server\r\n  toggleNode(node: AnalysisFlat, expand: boolean) {\r\n    node.isLoading = true;\r\n    const index = this.data.indexOf(node);\r\n    if (expand) {\r\n      if (node.level === 1) this._activeNode = node.id;\r\n      const data = { ...this.database.dbForm.value };\r\n      data.id = node.id;\r\n      data.level = node.level + 1;\r\n      data.type = node.type;\r\n      this.database.getAnalysis(data).subscribe((res) => {\r\n        const children: AnalysisFlat[] = res.data.records;\r\n        this.data.splice(index + 1, 0, ...children);\r\n        this.dataChange.next(this.data);\r\n        node.isLoading = false;\r\n        node.freez = -1;\r\n      });\r\n    } else {\r\n      let imidiateChildren = 0;\r\n      let continu = false;\r\n      this.data.forEach((subNode) => {\r\n        if (subNode.level > node.level && continu) {\r\n          imidiateChildren++;\r\n        } else if (subNode.id == node.id) {\r\n          continu = true;\r\n        } else if (subNode.level == node.level) {\r\n          continu = false;\r\n        }\r\n      });\r\n      this.data.splice(index + 1, imidiateChildren);\r\n      this.dataChange.next(this.data);\r\n      node.isLoading = false;\r\n      if (node.level === 1) {\r\n        this._activeNode = '';\r\n        node.freez = node.checked;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { SelectionModel } from '@angular/cdk/collections';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Component, Injector } from '@angular/core';\r\nimport { DynamicDatabase } from '../class/allow-permission/DynamicDataBase';\r\nimport { DynamicDataSource } from '../class/allow-permission/DynamicDataSource';\r\nimport { AnalysisFlat } from '../class/allow-permission/DynamicFlatNode';\r\nimport { BaseForm } from './base.form';\r\n\r\n@Component({\r\n  selector: 'di-tree-view',\r\n  template: '',\r\n  providers: [DynamicDatabase],\r\n})\r\nexport class TreeView extends BaseForm {\r\n  constructor(public injector: Injector) {\r\n    super(injector);\r\n    this.database = injector.get(DynamicDatabase);\r\n    this.treeControl = new FlatTreeControl<AnalysisFlat>(\r\n      this.getLevel,\r\n      this.isExpandable\r\n    );\r\n    this.dataSource =\r\n      new DynamicDataSource(this.treeControl, this.database);\r\n  }\r\n  ngOnInit() {\r\n    this._fs._form.valueChanges.subscribe(() => {\r\n      this.dataSource.data = [];\r\n    });\r\n    this.database.dbForm = this._fs._form;\r\n  }\r\n  database: DynamicDatabase;\r\n  treeControl: FlatTreeControl<AnalysisFlat>;\r\n  dataSource: DynamicDataSource;\r\n  loadingTree = false;\r\n  _process() {\r\n    this.loadingTree = true;\r\n    this.dataSource._activeNode = '';\r\n    const data = this._fs._form.value;\r\n    data.level = '1';\r\n    this.database.getAnalysis(data).subscribe({\r\n      next: (res) => {\r\n        this.dataSource.data = res.data.records;\r\n      },\r\n      complete: () => {\r\n        this.loadingTree = false\r\n      }\r\n    });\r\n  }\r\n  saveNodeTree(node: AnalysisFlat) {\r\n    const data = { ...this._fs._form.value };\r\n    data.id = node.id;\r\n    data.level = node.level;\r\n    data.checked = node.checked;\r\n    node.isLoading = true\r\n    this.database.saveAnalysis(data)\r\n      .subscribe({\r\n        complete: () => {\r\n          node.isLoading = false;\r\n        }\r\n    });\r\n  }\r\n  _disabledNode(node: AnalysisFlat) {\r\n    return (\r\n      node.id !== this.dataSource?._activeNode &&\r\n      this.dataSource?._activeNode != '' &&\r\n      node.level === 1\r\n    );\r\n  }\r\n  getLevel = (node: AnalysisFlat) => {\r\n    return node.level;\r\n  };\r\n  isExpandable = (node: AnalysisFlat) => {\r\n    return node.expandable;\r\n  };\r\n  hasChild = (_: number, _nodeData: AnalysisFlat) => {\r\n    return _nodeData.expandable;\r\n  };\r\n  /* Allowed multiple Selection */\r\n  checklistSelection = new SelectionModel<AnalysisFlat>(true);\r\n  /** Whether all the descendants of the node are selected. */\r\n  parentAll(node: AnalysisFlat) {\r\n    if (node.allowed >= node.total && node.total != 0) {\r\n      return true;\r\n    } else return false;\r\n  }\r\n  /** Whether part of the descendants are selected */\r\n  parentPartially(node) {\r\n    if (\r\n      node.allowed != 0 &&\r\n      node.allowed != node.total &&\r\n      node.allowed < node.total\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n      //this.descendantsparentPartially(node);\r\n    }\r\n  }\r\n  checkSelection(node: AnalysisFlat) {\r\n    if (node.checked === 1) {\r\n      return true;\r\n    } else false;\r\n  }\r\n  // Only For Parent Toggle Selection\r\n  itemToggle(node: AnalysisFlat): void {\r\n    if (node.allowed >=  node.total) {\r\n      node.checked = 0;\r\n      node.allowed = 0\r\n    } else {\r\n      node.checked = 1;\r\n      node.allowed = node.total\r\n    }\r\n    if (this.treeControl.isExpanded(node)) {\r\n      const descendants = this.treeControl.getDescendants(node);\r\n      descendants.forEach((child) => {\r\n        if (node.checked == 1) {\r\n          child.allowed = child.total;\r\n          child.checked = 1;\r\n        } else {\r\n          child.allowed = 0;\r\n          child.checked = 0;\r\n        }\r\n      });\r\n    }\r\n    this.saveNodeTree(node);\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n  // For Child Toggle Selection\r\n  leafSelected(node: AnalysisFlat): void {\r\n    if (node.checked == 1) {\r\n      node.checked = 0;\r\n      node.allowed = 0\r\n    } else {\r\n      node.checked = 1;\r\n      node.allowed = node.total\r\n    }\r\n    this.saveNodeTree(node);\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n  checkAllParentsSelection(node: AnalysisFlat): void {\r\n    let parent: AnalysisFlat | null = this.getParentNode(node);\r\n    let checkMore = true;\r\n    let childTotal = node.total;\r\n    let increment = 0\r\n    let childParentDecrement = false;\r\n    while (parent) {\r\n      this.checkRootNodeSelection(parent);\r\n      if(node.checked == 1){\r\n        if (checkMore &&\r\n          ((parent.allowed + childTotal) + 1) >= parent.total) {\r\n          parent.allowed = parent.total;\r\n          parent.checked = 1\r\n          increment += 1\r\n          childTotal = parent.total;\r\n          checkMore = true;\r\n        }\r\n        else {\r\n          parent.allowed += node.total + increment;\r\n          parent.checked = 2\r\n          checkMore = false;\r\n        }\r\n      } else {\r\n        // If anything goes wrong work here\r\n        if(parent.allowed == parent.total){\r\n          childParentDecrement = true;\r\n          childTotal += 1\r\n          parent.allowed -= childTotal;\r\n          parent.checked = 2;\r\n        } else if((parent.allowed - childTotal) == 0){\r\n          parent.allowed = 0;\r\n          parent.checked = 0\r\n        } else if(childParentDecrement){\r\n          parent.allowed -= childTotal;\r\n          parent.checked = 2;\r\n        } else{\r\n          parent.allowed -= node.total;\r\n        }\r\n      }\r\n      parent = this.getParentNode(parent);\r\n    }\r\n  }\r\n  checkRootNodeSelection(node: AnalysisFlat): void {\r\n    const nodeSelected = this.checklistSelection.isSelected(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descparentAll =\r\n      descendants.length > 0 &&\r\n      descendants.every((child) => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    if (nodeSelected && !descparentAll) {\r\n      this.checklistSelection.deselect(node);\r\n    } else if (!nodeSelected && descparentAll) {\r\n      this.checklistSelection.select(node);\r\n    }\r\n  }\r\n  getParentNode(node: AnalysisFlat): AnalysisFlat | null {\r\n    const currentLevel = this.getLevel(node);\r\n    if (currentLevel < 1) {\r\n      return null;\r\n    }\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}